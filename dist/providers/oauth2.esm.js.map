{"version":3,"file":"oauth2.esm.js","sources":["../../src/providers/oauth2.ts"],"sourcesContent":["import fetch from \"cross-fetch\";\nimport { ucFirst } from \"../helpers\";\nimport { OAuth2BaseProvider } from \"./oauth2.base\";\nconst defaultConfig = {\n    responseType: \"code\",\n    grantType: \"authorization_code\",\n    contentType: \"application/json\",\n};\nexport class OAuth2Provider extends OAuth2BaseProvider {\n    constructor(config) {\n        super({\n            ...defaultConfig,\n            ...config,\n        });\n    }\n    getAuthorizationUrl({ host }, auth, state, nonce) {\n        const data = {\n            state,\n            nonce,\n            response_type: this.config.responseType,\n            client_id: this.config.clientId,\n            scope: Array.isArray(this.config.scope) ? this.config.scope.join(\" \") : this.config.scope,\n            redirect_uri: this.getCallbackUri(auth, host),\n            ...(this.config.authorizationParams ?? {}),\n        };\n        const url = `${this.config.authorizationUrl}?${new URLSearchParams(data)}`;\n        return url;\n    }\n    async getTokens(code, redirectUri) {\n        const data = {\n            code,\n            grant_type: this.config.grantType,\n            client_id: this.config.clientId,\n            redirect_uri: redirectUri,\n            client_secret: this.config.clientSecret,\n            ...(this.config.params ?? {}),\n        };\n        let body;\n        if (this.config.contentType === \"application/x-www-form-urlencoded\") {\n            body = Object.entries(data)\n                .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n                .join(\"&\");\n        }\n        else {\n            body = JSON.stringify(data);\n        }\n        const res = await fetch(this.config.accessTokenUrl, {\n            body,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": this.config.contentType,\n                ...(this.config.headers ?? {}),\n            },\n        });\n        return await res.json();\n    }\n    async getUserProfile(tokens) {\n        const res = await fetch(this.config.profileUrl, {\n            headers: { Authorization: `${ucFirst(tokens.token_type)} ${tokens.access_token}` },\n        });\n        return await res.json();\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA,MAAM,gBAAgB;AAAA,EAClB,cAAc;AAAA,EACd,WAAW;AAAA,EACX,aAAa;AAAA;6BAEmB,mBAAmB;AAAA,EACnD,YAAY,QAAQ;AAChB,UAAM;AAAA,SACC;AAAA,SACA;AAAA;AAAA;AAAA,EAGX,oBAAoB,EAAE,QAAQ,MAAM,OAAO,OAAO;AAC9C,UAAM,OAAO;AAAA,MACT;AAAA,MACA;AAAA,MACA,eAAe,KAAK,OAAO;AAAA,MAC3B,WAAW,KAAK,OAAO;AAAA,MACvB,OAAO,MAAM,QAAQ,KAAK,OAAO,SAAS,KAAK,OAAO,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,MACpF,cAAc,KAAK,eAAe,MAAM;AAAA,SACpC,KAAK,OAAO,uBAAuB;AAAA;AAE3C,UAAM,MAAM,GAAG,KAAK,OAAO,oBAAoB,IAAI,gBAAgB;AACnE,WAAO;AAAA;AAAA,QAEL,UAAU,MAAM,aAAa;AAC/B,UAAM,OAAO;AAAA,MACT;AAAA,MACA,YAAY,KAAK,OAAO;AAAA,MACxB,WAAW,KAAK,OAAO;AAAA,MACvB,cAAc;AAAA,MACd,eAAe,KAAK,OAAO;AAAA,SACvB,KAAK,OAAO,UAAU;AAAA;AAE9B,QAAI;AACJ,QAAI,KAAK,OAAO,gBAAgB,qCAAqC;AACjE,aAAO,OAAO,QAAQ,MACjB,IAAI,CAAC,CAAC,KAAK,WAAW,GAAG,mBAAmB,QAAQ,mBAAmB,UACvE,KAAK;AAAA,WAET;AACD,aAAO,KAAK,UAAU;AAAA;AAE1B,UAAM,MAAM,MAAM,MAAM,KAAK,OAAO,gBAAgB;AAAA,MAChD;AAAA,MACA,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB,KAAK,OAAO;AAAA,WACxB,KAAK,OAAO,WAAW;AAAA;AAAA;AAGnC,WAAO,MAAM,IAAI;AAAA;AAAA,QAEf,eAAe,QAAQ;AACzB,UAAM,MAAM,MAAM,MAAM,KAAK,OAAO,YAAY;AAAA,MAC5C,SAAS,EAAE,eAAe,GAAG,QAAQ,OAAO,eAAe,OAAO;AAAA;AAEtE,WAAO,MAAM,IAAI;AAAA;AAAA;;;;"}